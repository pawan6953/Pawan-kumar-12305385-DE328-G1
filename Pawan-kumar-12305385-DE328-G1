import csv
import bcrypt
import re
import requests
import datetime


LOGIN_ATTEMPT_LIMIT = 5
NASA_API_KEY = "sw4Nm5XwTsPAPwiV7UOhzGpHNDHX8Cx3oBsMPNS1"
NASA_NEO_API_URL = f"https://api.nasa.gov/neo/rest/v1/feed?api_key={NASA_API_KEY}"

def validate_email(email):
    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(pattern, email)

def validate_password(password):
    if len(password) < 8 or not any(char in "!@#$%^&*()-+" for char in password):
        return False
    return True

def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

def check_password(hashed_password, user_password):
    return bcrypt.checkpw(user_password.encode('utf-8'), hashed_password.encode('utf-8'))

def log_action(email, action):
    with open('log.csv', mode='a', newline='') as log_file:
        log_writer = csv.writer(log_file)
        log_writer.writerow([email, action, datetime.datetime.now()])

def read_credentials():
    users = []
    try:
        with open('regno.csv', mode='r') as file:
            reader = csv.DictReader(file)
            for row in reader:
                users.append(row)
    except FileNotFoundError:
        pass
    return users

def write_credentials(users):
    with open('regno.csv', mode='w', newline='') as file:
        fieldnames = ['email', 'password', 'security_question', 'security_answer']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(users)


def sign_up():
    users = read_credentials()
    email = input("Enter your email: ")

    for user in users:
        if user['email'] == email:
            print("Email is already registered. Please try logging in.")
            login()
    
    if not validate_email(email):
        print("Invalid email format.")
        return
    
    password = input("Enter your password: ")
    if not validate_password(password):
        print("Password must be at least 8 characters long and contain at least one special character.")
        return
    
    
    security_question = input("Enter a security question (for password recovery): ")
    security_answer = input("Enter the answer to your security question: ")

    
    hashed_password = hash_password(password).decode('utf-8')
    hashed_answer = hash_password(security_answer).decode('utf-8')

    users.append({
        'email': email,
        'password': hashed_password,
        'security_question': security_question,
        'security_answer': hashed_answer
    })

    write_credentials(users)
    log_action(email, "sign_up")
    print("Registration successful! You can now log in.")
    login()

def login():
    login_attempts = 0
    users = read_credentials()

    while login_attempts < LOGIN_ATTEMPT_LIMIT:
        email = input("Enter your email: ")
        password = input("Enter your password: ")

        if not validate_email(email):
            print("Invalid email format.")
            continue

        for user in users:
            if user['email'] == email:
                if check_password(user['password'], password):
                    log_action(email, "login_success")
                    print("Login successful!")
                    fetch_nasa_data()
                    return True
                    break
                else:
                    print("Incorrect password.")
                    log_action(email, "login_failed")
                    login_attempts += 1
                    print(f"Attempts left: {LOGIN_ATTEMPT_LIMIT - login_attempts}")
                    break
        else:
            print("Email not found.")
            log_action(email, "login_failed")
            sign_up()

    print("Too many failed attempts. Please reset the password")
    reset_password()
    return False


def reset_password():
    users = read_credentials()
    email = input("Enter your registered email: ")
    for user in users:
        if user['email'] == email:
            security_answer = input(f"{user['security_question']}: ")
            if check_password(user['security_answer'], security_answer):
                new_password = input("Enter your new password: ")
                if validate_password(new_password):
                    user['password'] = hash_password(new_password).decode('utf-8')
                    write_credentials(users)
                    print("Password reset successful!")
                    log_action(email, "password_reset")
                    return
                else:
                    print("Password does not meet the required criteria.")
                    return
            else:
                print("Incorrect answer to security question.")
                return
    print("Email not found.")


def fetch_nasa_data():
    print("Fetching NASA NEO (Near-Earth Objects) data...")
    
    try:
        response = requests.get(NASA_NEO_API_URL)
        data = response.json()
        
        # Extract relevant NEO information from the JSON response
        for date, neos in data['near_earth_objects'].items():
            print(f"Date: {date}")
            for neo in neos:
                name = neo['name']
                approach_date = neo['close_approach_data'][0]['close_approach_date']
                est_diameter = neo['estimated_diameter']['meters']['estimated_diameter_max']
                velocity = neo['close_approach_data'][0]['relative_velocity']['kilometers_per_hour']
                miss_distance = neo['close_approach_data'][0]['miss_distance']['kilometers']
                hazardous = neo['is_potentially_hazardous_asteroid']
                
                print(f"NEO Name: {name}")
                print(f"Close Approach Date: {approach_date}")
                print(f"Estimated Diameter: {est_diameter:.2f} meters")
                try:
                    velocity = float(neo['close_approach_data'][0]['relative_velocity']['kilometers_per_hour'])
                except (TypeError, ValueError):
                    velocity = 0.0  # Assign a default value if conversion fails
                    print("Warning: Could not convert velocity to float for NEO:", name)
                try:
                    miss_distance = float(miss_distance)
                except ValueError:
                    miss_distance = 0.0  # Or handle the error differently
                    print("Warning: Could not convert miss_distance to float for NEO:", name)

                print(f"Miss Distance: {miss_distance:.2f} km")
                print(f"Hazardous: {'Yes' if hazardous else 'No'}")
                print("-" * 40)

        log_action("user", "fetch_nasa_data")
    except requests.RequestException as e:
        print("Error fetching NASA data. Please check your connection or API key.")
        log_action("user", "fetch_nasa_data_failed")


if __name__ == "__main__":
    print("Welcome to the NASA Space Data Application")
    
    choice = input("Do you want to (S)ign Up, (L)ogin, or (R)eset password? ").lower()
    
    if choice == 's':
        sign_up()
    elif choice == 'l':
        if login():
            fetch_nasa_data()
    elif choice == 'r':
        reset_password()
    else:
        print("Invalid choice. Exiting...")
